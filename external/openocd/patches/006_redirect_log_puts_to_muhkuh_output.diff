diff -uNr openocd-0.11.0/src/helper/log.c openocd-0.11.0_patched/src/helper/log.c
--- openocd-0.11.0/src/helper/log.c	2020-12-09 20:43:09.000000000 +0100
+++ openocd-0.11.0_patched/src/helper/log.c	2022-03-09 21:31:00.472541138 +0100
@@ -40,6 +40,15 @@
 #endif
 #endif
 
+
+static PFN_OUTPUT_HANDLER_T s_pfnOutputHandler;
+
+void log_set_output_handler(PFN_OUTPUT_HANDLER_T pfnOutputHandler)
+{
+	s_pfnOutputHandler = pfnOutputHandler;
+}
+
+
 int debug_level = LOG_LVL_INFO;
 
 static FILE *log_output;
@@ -50,30 +59,8 @@
 
 static int64_t start;
 
-static const char * const log_strings[6] = {
-	"User : ",
-	"Error: ",
-	"Warn : ",	/* want a space after each colon, all same width, colons aligned */
-	"Info : ",
-	"Debug: ",
-	"Debug: "
-};
-
 static int count;
 
-/* forward the log to the listeners */
-static void log_forward(const char *file, unsigned line, const char *function, const char *string)
-{
-	struct log_callback *cb, *next;
-	cb = log_callbacks;
-	/* DANGER!!!! the log callback can remove itself!!!! */
-	while (cb) {
-		next = cb->next;
-		cb->fn(cb->priv, file, line, function, string);
-		cb = next;
-	}
-}
-
 /* The log_puts() serves two somewhat different goals:
  *
  * - logging
@@ -84,65 +71,13 @@
  * target_request.c).
  *
  */
-static void log_puts(enum log_levels level,
-	const char *file,
-	int line,
-	const char *function,
+static void log_puts(enum log_levels level __attribute__((unused)),
+	const char *file __attribute__((unused)),
+	int line __attribute__((unused)),
+	const char *function __attribute__((unused)),
 	const char *string)
 {
-	char *f;
-
-	if (!log_output) {
-		/* log_init() not called yet; print on stderr */
-		fputs(string, stderr);
-		fflush(stderr);
-		return;
-	}
-
-	if (level == LOG_LVL_OUTPUT) {
-		/* do not prepend any headers, just print out what we were given and return */
-		fputs(string, log_output);
-		fflush(log_output);
-		return;
-	}
-
-	f = strrchr(file, '/');
-	if (f != NULL)
-		file = f + 1;
-
-	if (strlen(string) > 0) {
-		if (debug_level >= LOG_LVL_DEBUG) {
-			/* print with count and time information */
-			int64_t t = timeval_ms() - start;
-#ifdef _DEBUG_FREE_SPACE_
-			struct mallinfo info;
-			info = mallinfo();
-#endif
-			fprintf(log_output, "%s%d %" PRId64 " %s:%d %s()"
-#ifdef _DEBUG_FREE_SPACE_
-				" %d"
-#endif
-				": %s", log_strings[level + 1], count, t, file, line, function,
-#ifdef _DEBUG_FREE_SPACE_
-				info.fordblks,
-#endif
-				string);
-		} else {
-			/* if we are using gdb through pipes then we do not want any output
-			 * to the pipe otherwise we get repeated strings */
-			fprintf(log_output, "%s%s",
-				(level > LOG_LVL_USER) ? log_strings[level + 1] : "", string);
-		}
-	} else {
-		/* Empty strings are sent to log callbacks to keep e.g. gdbserver alive, here we do
-		 *nothing. */
-	}
-
-	fflush(log_output);
-
-	/* Never forward LOG_LVL_DEBUG, too verbose and they can be found in the log if need be */
-	if (level <= LOG_LVL_INFO)
-		log_forward(file, line, function, string);
+	s_pfnOutputHandler(string);
 }
 
 void log_printf(enum log_levels level,
diff -uNr openocd-0.11.0/src/helper/log.h openocd-0.11.0_patched/src/helper/log.h
--- openocd-0.11.0/src/helper/log.h	2020-12-09 20:43:09.000000000 +0100
+++ openocd-0.11.0_patched/src/helper/log.h	2022-03-09 21:30:53.316599237 +0100
@@ -25,6 +25,11 @@
 #ifndef OPENOCD_HELPER_LOG_H
 #define OPENOCD_HELPER_LOG_H
 
+
+typedef void (*PFN_OUTPUT_HANDLER_T) (const char *pcLine);
+void log_set_output_handler(PFN_OUTPUT_HANDLER_T pfnOutputHandler);
+
+
 #include <helper/command.h>
 
 /* To achieve C99 printf compatibility in MinGW, gnu_printf should be
